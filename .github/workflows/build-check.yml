name: Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    name: Build and Test Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build all service images
        run: docker compose build

      - name: Start services for testing
        run: docker compose up -d core mcp web

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          timeout 120 bash -c 'until docker compose ps | grep -E "(core|mcp|web).*healthy"; do sleep 2; done'
          docker compose ps

      - name: Run core unit tests
        run: |
          echo "Running core unit tests..."
          docker compose run --rm \
            -e PYTHONPATH=/app \
            -e SERVICE_API_KEY=dev-service-key-12345 \
            tests python -m pytest tests/ -v \
            --tb=short \
            --disable-warnings \
            -m "not e2e" \
            --junitxml=/app/test-results-unit.xml
        continue-on-error: false

      - name: Run core e2e tests
        run: |
          echo "Running core e2e tests..."
          docker compose run --rm \
            -e PYTHONPATH=/app \
            -e SERVICE_API_KEY=dev-service-key-12345 \
            -e CORE_API_URL=http://core:8000 \
            tests python -m pytest tests/ -v \
            --tb=short \
            --disable-warnings \
            -m "e2e" \
            --junitxml=/app/test-results-e2e.xml
        continue-on-error: true

      - name: Run MCP tests
        run: |
          echo "Running MCP tests..."
          docker compose run --rm \
            -e PYTHONPATH=/app \
            -e CORE_API_URL=http://core:8000 \
            -e SERVICE_API_KEY=dev-service-key-12345 \
            mcp-tests python -m pytest tests/ -v \
            --tb=short \
            --disable-warnings \
            --junitxml=/app/test-results-mcp.xml
        continue-on-error: true

      - name: Run web tests
        run: |
          echo "Running web tests..."
          docker compose run --rm \
            -e CI=true \
            web npm test -- --coverage --watchAll=false --ci \
            --testResultsProcessor=jest-junit
        continue-on-error: true

      - name: Stop services
        if: always()
        run: docker compose down

      - name: Collect test results
        if: always()
        run: |
          echo "Test execution completed. Check individual step results above."
          echo "Core unit tests: Check step results"
          echo "Core e2e tests: Check step results"  
          echo "MCP tests: Check step results"
          echo "Web tests: Check step results"

  gitleaks-scan:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # We need to fetch the entire history for Gitleaks to scan everything
          fetch-depth: 0

      - name: Run Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          # The GITHUB_TOKEN is automatically provided by GitHub
          # The action will fail the job if secrets are found.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
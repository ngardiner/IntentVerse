name: Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    name: Code Quality and Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black pylint

      - name: Run Black (code formatting check)
        run: |
          echo "Running Black code formatting check..."
          if ! black --check --diff core/ mcp/; then
            echo "::warning::Code formatting issues found. Run 'black core/ mcp/' to fix them."
            echo "Black formatting check failed, but continuing with pipeline..."
          else
            echo "Black formatting check passed!"
          fi

      - name: Run Flake8 (style and error checking)
        run: |
          echo "Running Flake8 style and error checking..."
          if ! flake8 core/ mcp/; then
            echo "::warning::Flake8 found style or error issues."
            echo "Flake8 check failed, but continuing with pipeline..."
          else
            echo "Flake8 style check passed!"
          fi

      - name: Run Pylint (code quality analysis)
        run: |
          echo "Running Pylint code quality analysis..."
          # Run pylint on core service
          pylint core/app/ --exit-zero --output-format=text --reports=no > pylint-core.txt || true
          # Run pylint on mcp service  
          pylint mcp/app/ --exit-zero --output-format=text --reports=no > pylint-mcp.txt || true
          
          # Display results
          echo "=== Pylint Results for Core Service ==="
          cat pylint-core.txt
          echo ""
          echo "=== Pylint Results for MCP Service ==="
          cat pylint-mcp.txt
          
          # Check for critical issues (errors and warnings, but allow info and convention)
          core_issues=$(grep -E "^core/.*:[0-9]+:[0-9]+: [EW]" pylint-core.txt | wc -l || echo "0")
          mcp_issues=$(grep -E "^mcp/.*:[0-9]+:[0-9]+: [EW]" pylint-mcp.txt | wc -l || echo "0")
          
          echo "Core service critical issues: $core_issues"
          echo "MCP service critical issues: $mcp_issues"
          
          # For now, we'll make this non-blocking but report the issues
          if [ "$core_issues" -gt 0 ] || [ "$mcp_issues" -gt 0 ]; then
            echo "::warning::Pylint found $((core_issues + mcp_issues)) critical issues. Consider addressing them."
          fi

      - name: Linting Summary
        if: always()
        run: |
          echo "==================== LINTING SUMMARY ===================="
          echo "All linting checks completed (non-blocking)"
          echo "• Black, Flake8, and Pylint results are shown above"
          echo "• Linting issues are flagged as warnings but don't fail the pipeline"
          echo "• Tests will run regardless of linting results"
          echo "=========================================================="

  build-and-test:
    name: Build and Test Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build all service images
        run: docker compose build --no-cache

      - name: Start services for testing
        run: docker compose up -d core mcp web

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          timeout 120 bash -c 'until docker compose ps | grep -E "(core|mcp|web).*healthy"; do sleep 2; done'
          docker compose ps

      - name: Run core unit tests
        id: core-unit-tests
        run: |
          echo "Running core unit tests..."
          docker compose run --name intentverse-core-unit-tests \
            -e PYTHONPATH=/app \
            -e SERVICE_API_KEY=test-service-key-12345 \
            -e LOG_LEVEL=ERROR \
            tests python -m pytest tests/ -v \
            --tb=short \
            --disable-warnings \
            --no-header \
            -m "not e2e and not database_integration" \
            --junitxml=/app/test-results-unit.xml
        continue-on-error: true

      - name: Run core e2e tests
        id: core-e2e-tests
        run: |
          echo "Running core e2e tests..."
          docker compose run --name intentverse-core-e2e-tests \
            -e PYTHONPATH=/app \
            -e SERVICE_API_KEY=dev-service-key-12345 \
            -e CORE_API_URL=http://core:8000 \
            -e LOG_LEVEL=ERROR \
            tests python -m pytest tests/ -v \
            --tb=short \
            --disable-warnings \
            --no-header \
            -m "e2e and not database_integration" \
            --junitxml=/app/test-results-e2e.xml
        continue-on-error: true

      - name: Verify Core service is ready for MCP tests
        run: |
          echo "Verifying Core service is ready for MCP integration tests..."
          # Additional wait to ensure Core service is fully ready
          for i in {1..30}; do
            if docker compose exec -T core curl -f http://localhost:8000/ >/dev/null 2>&1; then
              echo "Core service is responding"
              break
            fi
            echo "Waiting for Core service... (attempt $i/30)"
            sleep 2
          done

      - name: Run MCP tests
        id: mcp-tests
        run: |
          echo "Running MCP tests..."
          echo "Core service status:"
          docker compose ps core
          echo "Network connectivity test:"
          docker compose run --rm mcp-tests ping -c 3 core || true
          echo "Starting MCP tests..."
          docker compose run --name intentverse-mcp-tests \
            -e PYTHONPATH=/app \
            -e CORE_API_URL=http://core:8000 \
            -e SERVICE_API_KEY=dev-service-key-12345 \
            -e LOG_LEVEL=INFO \
            -e CI=true \
            -e GITHUB_ACTIONS=true \
            mcp-tests python -m pytest tests/ -v \
            --tb=short \
            --disable-warnings \
            --no-header \
            --junitxml=/app/test-results-mcp.xml
        continue-on-error: true

      - name: Run web core tests
        id: web-core-tests
        run: |
          echo "Running web core tests (App + API)..."
          timeout 180s docker compose run --name intentverse-web-core-tests \
            -e CI=true \
            web npm run test:ci
        continue-on-error: true

      - name: Run web authentication tests
        id: web-auth-tests
        run: |
          echo "Running web authentication tests..."
          timeout 180s docker compose run --name intentverse-web-auth-tests \
            -e CI=true \
            web npm run test:web-auth
        continue-on-error: true

      - name: Run web component tests
        id: web-component-tests
        run: |
          echo "Running web component tests..."
          # Run with a timeout to prevent hanging tests
          timeout 180s docker compose run --name intentverse-web-component-tests \
            -e CI=true \
            web npm run test:web-components
        continue-on-error: true

      - name: Run web page tests
        id: web-page-tests
        run: |
          echo "Running web page tests..."
          timeout 180s docker compose run --name intentverse-web-page-tests \
            -e CI=true \
            web npm run test:web-pages
        continue-on-error: true

      - name: Collect test results
        if: always()
        run: |
          echo "==================== TEST EXECUTION SUMMARY ===================="
          echo "Core unit tests: ${{ steps.core-unit-tests.outcome }}"
          echo "Core e2e tests: ${{ steps.core-e2e-tests.outcome }}"  
          echo "MCP tests: ${{ steps.mcp-tests.outcome }}"
          echo "Web core tests: ${{ steps.web-core-tests.outcome }}"
          echo "Web authentication tests: ${{ steps.web-auth-tests.outcome }}"
          echo "Web component tests: ${{ steps.web-component-tests.outcome }}"
          echo "Web page tests: ${{ steps.web-page-tests.outcome }}"
          echo "=============================================================="
          
          # Extract test counts from JUnit XML files
          echo "Extracting test counts from JUnit XML files..."
          
          # Function to extract test counts from XML
          extract_counts() {
            local file=$1
            if [ -f "$file" ]; then
              echo "From $(basename $file):"
              tests=$(grep -o 'tests="[0-9]*"' "$file" | head -1 | grep -o '[0-9]*')
              failures=$(grep -o 'failures="[0-9]*"' "$file" | head -1 | grep -o '[0-9]*')
              errors=$(grep -o 'errors="[0-9]*"' "$file" | head -1 | grep -o '[0-9]*')
              skipped=$(grep -o 'skipped="[0-9]*"' "$file" | head -1 | grep -o '[0-9]*')
              echo "  Tests: ${tests:-0}, Failures: ${failures:-0}, Errors: ${errors:-0}, Skipped: ${skipped:-0}"
            else
              echo "File $file not found"
            fi
          }
          
          # Create a directory for test artifacts
          mkdir -p test-results
          
          # Extract and display test counts
          docker cp intentverse-core-unit-tests:/app/test-results-unit.xml ./test-results/core-unit.xml 2>/dev/null || true
          docker cp intentverse-core-e2e-tests:/app/test-results-e2e.xml ./test-results/core-e2e.xml 2>/dev/null || true
          docker cp intentverse-mcp-tests:/app/test-results-mcp.xml ./test-results/mcp.xml 2>/dev/null || true
          docker cp intentverse-web-core-tests:/app/test-results/web-core-test-results.xml ./test-results/web-core.xml 2>/dev/null || true
          docker cp intentverse-web-auth-tests:/app/test-results/web-auth-test-results.xml ./test-results/web-auth.xml 2>/dev/null || true
          docker cp intentverse-web-component-tests:/app/test-results/web-components-test-results.xml ./test-results/web-components.xml 2>/dev/null || true
          docker cp intentverse-web-page-tests:/app/test-results/web-pages-test-results.xml ./test-results/web-pages.xml 2>/dev/null || true
          
          echo "Core unit tests:"
          extract_counts "./test-results/core-unit.xml"
          
          echo "Core e2e tests:"
          extract_counts "./test-results/core-e2e.xml"
          
          echo "MCP tests:"
          extract_counts "./test-results/mcp.xml"
          
          echo "Web core tests:"
          extract_counts "./test-results/web-core.xml"
          
          echo "Web authentication tests:"
          extract_counts "./test-results/web-auth.xml"
          
          echo "Web component tests:"
          extract_counts "./test-results/web-components.xml"
          
          echo "Web page tests:"
          extract_counts "./test-results/web-pages.xml"
          
          # Create a summary file
          echo "# Test Results Summary" > test-results/summary.md
          echo "" >> test-results/summary.md
          echo "| Test Suite | Status | Tests | Failures | Errors | Skipped |" >> test-results/summary.md
          echo "|-----------|--------|-------|----------|--------|---------|" >> test-results/summary.md
          
          # Add core unit tests
          if [ -f "./test-results/core-unit.xml" ]; then
            tests=$(grep -o 'tests="[0-9]*"' "./test-results/core-unit.xml" | head -1 | grep -o '[0-9]*')
            failures=$(grep -o 'failures="[0-9]*"' "./test-results/core-unit.xml" | head -1 | grep -o '[0-9]*')
            errors=$(grep -o 'errors="[0-9]*"' "./test-results/core-unit.xml" | head -1 | grep -o '[0-9]*')
            skipped=$(grep -o 'skipped="[0-9]*"' "./test-results/core-unit.xml" | head -1 | grep -o '[0-9]*')
            echo "| Core Unit | ${{ steps.core-unit-tests.outcome }} | ${tests:-0} | ${failures:-0} | ${errors:-0} | ${skipped:-0} |" >> test-results/summary.md
          else
            echo "| Core Unit | ${{ steps.core-unit-tests.outcome }} | - | - | - | - |" >> test-results/summary.md
          fi
          
          # Add core e2e tests
          if [ -f "./test-results/core-e2e.xml" ]; then
            tests=$(grep -o 'tests="[0-9]*"' "./test-results/core-e2e.xml" | head -1 | grep -o '[0-9]*')
            failures=$(grep -o 'failures="[0-9]*"' "./test-results/core-e2e.xml" | head -1 | grep -o '[0-9]*')
            errors=$(grep -o 'errors="[0-9]*"' "./test-results/core-e2e.xml" | head -1 | grep -o '[0-9]*')
            skipped=$(grep -o 'skipped="[0-9]*"' "./test-results/core-e2e.xml" | head -1 | grep -o '[0-9]*')
            echo "| Core E2E | ${{ steps.core-e2e-tests.outcome }} | ${tests:-0} | ${failures:-0} | ${errors:-0} | ${skipped:-0} |" >> test-results/summary.md
          else
            echo "| Core E2E | ${{ steps.core-e2e-tests.outcome }} | - | - | - | - |" >> test-results/summary.md
          fi
          
          # Add MCP tests
          if [ -f "./test-results/mcp.xml" ]; then
            tests=$(grep -o 'tests="[0-9]*"' "./test-results/mcp.xml" | head -1 | grep -o '[0-9]*')
            failures=$(grep -o 'failures="[0-9]*"' "./test-results/mcp.xml" | head -1 | grep -o '[0-9]*')
            errors=$(grep -o 'errors="[0-9]*"' "./test-results/mcp.xml" | head -1 | grep -o '[0-9]*')
            skipped=$(grep -o 'skipped="[0-9]*"' "./test-results/mcp.xml" | head -1 | grep -o '[0-9]*')
            echo "| MCP | ${{ steps.mcp-tests.outcome }} | ${tests:-0} | ${failures:-0} | ${errors:-0} | ${skipped:-0} |" >> test-results/summary.md
          else
            echo "| MCP | ${{ steps.mcp-tests.outcome }} | - | - | - | - |" >> test-results/summary.md
          fi
          
          # Add Web Core tests
          if [ -f "./test-results/web-core.xml" ]; then
            tests=$(grep -o 'tests="[0-9]*"' "./test-results/web-core.xml" | head -1 | grep -o '[0-9]*')
            failures=$(grep -o 'failures="[0-9]*"' "./test-results/web-core.xml" | head -1 | grep -o '[0-9]*')
            errors=$(grep -o 'errors="[0-9]*"' "./test-results/web-core.xml" | head -1 | grep -o '[0-9]*')
            skipped=$(grep -o 'skipped="[0-9]*"' "./test-results/web-core.xml" | head -1 | grep -o '[0-9]*')
            echo "| Web Core | ${{ steps.web-core-tests.outcome }} | ${tests:-0} | ${failures:-0} | ${errors:-0} | ${skipped:-0} |" >> test-results/summary.md
          else
            echo "| Web Core | ${{ steps.web-core-tests.outcome }} | - | - | - | - |" >> test-results/summary.md
          fi
          
          # Add Web Authentication tests
          if [ -f "./test-results/web-auth.xml" ]; then
            tests=$(grep -o 'tests="[0-9]*"' "./test-results/web-auth.xml" | head -1 | grep -o '[0-9]*')
            failures=$(grep -o 'failures="[0-9]*"' "./test-results/web-auth.xml" | head -1 | grep -o '[0-9]*')
            errors=$(grep -o 'errors="[0-9]*"' "./test-results/web-auth.xml" | head -1 | grep -o '[0-9]*')
            skipped=$(grep -o 'skipped="[0-9]*"' "./test-results/web-auth.xml" | head -1 | grep -o '[0-9]*')
            echo "| Web Authentication | ${{ steps.web-auth-tests.outcome }} | ${tests:-0} | ${failures:-0} | ${errors:-0} | ${skipped:-0} |" >> test-results/summary.md
          else
            echo "| Web Authentication | ${{ steps.web-auth-tests.outcome }} | - | - | - | - |" >> test-results/summary.md
          fi
          
          # Add Web Component tests
          if [ -f "./test-results/web-components.xml" ]; then
            tests=$(grep -o 'tests="[0-9]*"' "./test-results/web-components.xml" | head -1 | grep -o '[0-9]*')
            failures=$(grep -o 'failures="[0-9]*"' "./test-results/web-components.xml" | head -1 | grep -o '[0-9]*')
            errors=$(grep -o 'errors="[0-9]*"' "./test-results/web-components.xml" | head -1 | grep -o '[0-9]*')
            skipped=$(grep -o 'skipped="[0-9]*"' "./test-results/web-components.xml" | head -1 | grep -o '[0-9]*')
            echo "| Web Components | ${{ steps.web-component-tests.outcome }} | ${tests:-0} | ${failures:-0} | ${errors:-0} | ${skipped:-0} |" >> test-results/summary.md
          else
            echo "| Web Components | ${{ steps.web-component-tests.outcome }} | - | - | - | - |" >> test-results/summary.md
          fi
          
          # Add Web Page tests
          if [ -f "./test-results/web-pages.xml" ]; then
            tests=$(grep -o 'tests="[0-9]*"' "./test-results/web-pages.xml" | head -1 | grep -o '[0-9]*')
            failures=$(grep -o 'failures="[0-9]*"' "./test-results/web-pages.xml" | head -1 | grep -o '[0-9]*')
            errors=$(grep -o 'errors="[0-9]*"' "./test-results/web-pages.xml" | head -1 | grep -o '[0-9]*')
            skipped=$(grep -o 'skipped="[0-9]*"' "./test-results/web-pages.xml" | head -1 | grep -o '[0-9]*')
            echo "| Web Pages | ${{ steps.web-page-tests.outcome }} | ${tests:-0} | ${failures:-0} | ${errors:-0} | ${skipped:-0} |" >> test-results/summary.md
          else
            echo "| Web Pages | ${{ steps.web-page-tests.outcome }} | - | - | - | - |" >> test-results/summary.md
          fi
          
          # Display the summary
          cat test-results/summary.md
          
          # Set exit code based on test results
          if [ "${{ steps.core-unit-tests.outcome }}" == "failure" ] || \
             [ "${{ steps.core-e2e-tests.outcome }}" == "failure" ] || \
             [ "${{ steps.mcp-tests.outcome }}" == "failure" ] || \
             [ "${{ steps.web-core-tests.outcome }}" == "failure" ] || \
             [ "${{ steps.web-auth-tests.outcome }}" == "failure" ] || \
             [ "${{ steps.web-component-tests.outcome }}" == "failure" ] || \
             [ "${{ steps.web-page-tests.outcome }}" == "failure" ]; then
            echo "::error::One or more test suites failed!"
            exit 1
          fi

      - name: Stop services
        if: always()
        run: |
          docker compose down
          # Clean up the named test containers if they exist
          docker rm intentverse-web-core-tests 2>/dev/null || true
          docker rm intentverse-web-auth-tests 2>/dev/null || true
          docker rm intentverse-web-component-tests 2>/dev/null || true
          docker rm intentverse-web-page-tests 2>/dev/null || true
          docker rm intentverse-core-unit-tests 2>/dev/null || true
          docker rm intentverse-core-e2e-tests 2>/dev/null || true
          docker rm intentverse-mcp-tests 2>/dev/null || true
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  database-tests:
    name: Database Compatibility Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        database: [postgresql, mysql, mariadb]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start ${{ matrix.database }} test database
        working-directory: docs/deploy
        run: |
          echo "Starting ${{ matrix.database }} test database..."
          docker compose -f docker-compose.testing.yml up -d ${{ matrix.database }}-test
          
      - name: Wait for ${{ matrix.database }} to be ready
        working-directory: docs/deploy
        run: |
          echo "Waiting for ${{ matrix.database }} to be ready..."
          timeout 60 bash -c 'until docker compose -f docker-compose.testing.yml ps | grep "${{ matrix.database }}-test.*healthy"; do sleep 2; done'
          docker compose -f docker-compose.testing.yml ps

      - name: Run ${{ matrix.database }} database tests
        working-directory: docs/deploy
        run: |
          echo "Running ${{ matrix.database }} database tests..."
          if [ "${{ matrix.database }}" = "postgresql" ]; then
            TEST_FILE="tests/test_e2e_database_manual.py::TestPostgreSQLManual"
            DB_PORT=5432
          elif [ "${{ matrix.database }}" = "mysql" ]; then
            TEST_FILE="tests/test_e2e_database_manual.py::TestMySQLManual"
            DB_PORT=3307
          elif [ "${{ matrix.database }}" = "mariadb" ]; then
            TEST_FILE="tests/test_e2e_database_manual.py::TestMySQLManual"
            DB_PORT=3306
          fi
          
          docker compose -f docker-compose.testing.yml run --rm \
            -e INTENTVERSE_DB_TYPE=${{ matrix.database }} \
            -e INTENTVERSE_DB_HOST=${{ matrix.database }}-test \
            -e INTENTVERSE_DB_PORT=$DB_PORT \
            -e INTENTVERSE_DB_NAME=intentverse_test \
            -e INTENTVERSE_DB_USER=intentverse \
            -e INTENTVERSE_DB_PASSWORD=intentverse_password \
            -e LOG_LEVEL=ERROR \
            test-runner python -m pytest $TEST_FILE -v \
            --tb=short \
            --disable-warnings \
            --no-header \
            --junitxml=/app/test-results-${{ matrix.database }}.xml

      - name: Stop ${{ matrix.database }} test database
        if: always()
        working-directory: docs/deploy
        run: |
          docker compose -f docker-compose.testing.yml down -v

      - name: Upload ${{ matrix.database }} test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: database-test-results-${{ matrix.database }}
          path: core/test-results-${{ matrix.database }}.xml
          retention-days: 7

  gitleaks-scan:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # We need to fetch the entire history for Gitleaks to scan everything
          fetch-depth: 0

      - name: Run Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          # The GITHUB_TOKEN is automatically provided by GitHub
          # The action will fail the job if secrets are found.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
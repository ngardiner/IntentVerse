name: Security Scanning

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    # Run weekly on Monday at 2:00 AM
    - cron: '0 2 * * 1'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install safety
        run: |
          python -m pip install --upgrade pip
          pip install safety

      - name: Scan Python dependencies (Core)
        run: |
          echo "Scanning core dependencies..."
          cd IntentVerse/core
          safety check -r requirements.txt --full-report --output text

      - name: Scan Python dependencies (MCP)
        run: |
          echo "Scanning MCP dependencies..."
          cd IntentVerse/mcp
          safety check -r requirements.txt --full-report --output text

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Scan JavaScript dependencies
        run: |
          echo "Scanning web dependencies..."
          cd IntentVerse/web
          npm install
          npm audit --audit-level=moderate

  bandit-scan:
    name: Python Security Scan (Bandit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run Bandit scan (Core)
        run: |
          echo "Running Bandit security scan on core..."
          bandit -r IntentVerse/core/app -f json -o bandit-core-results.json || true
          
      - name: Run Bandit scan (MCP)
        run: |
          echo "Running Bandit security scan on MCP..."
          bandit -r IntentVerse/mcp/app -f json -o bandit-mcp-results.json || true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: bandit-*.json
          retention-days: 7
          
  custom-security-checks:
    name: IntentVerse Custom Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Run custom security checks
        run: |
          echo "Running custom IntentVerse security checks..."
          chmod +x IntentVerse/scripts/security_checks.py
          python IntentVerse/scripts/security_checks.py --path ./IntentVerse --output custom-security-results.json
        continue-on-error: true

      - name: Upload custom security check results
        uses: actions/upload-artifact@v4
        with:
          name: custom-security-results
          path: custom-security-results.json
          retention-days: 7

  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Semgrep scan
        run: |
          semgrep scan \
            --config=p/owasp-top-ten \
            --config=p/python \
            --config=p/react \
            --config=p/javascript \
            --json > semgrep-results.json || true

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.json
          retention-days: 7

  docker-scan:
    name: Docker Image Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build core image for scanning
        uses: docker/build-push-action@v4
        with:
          context: ./IntentVerse/core
          push: false
          load: true
          tags: intentverse-core:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan core image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'intentverse-core:scan'
          format: 'sarif'
          output: 'trivy-core-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Build MCP image for scanning
        uses: docker/build-push-action@v4
        with:
          context: ./IntentVerse/mcp
          push: false
          load: true
          tags: intentverse-mcp:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan MCP image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'intentverse-mcp:scan'
          format: 'sarif'
          output: 'trivy-mcp-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-*.sarif
          category: trivy

  secret-scanning:
    name: Advanced Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog-actions-scan@master
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  security-report:
    name: Generate Security Report
    needs: [dependency-scan, bandit-scan, custom-security-checks, semgrep-scan, docker-scan, secret-scanning]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results Summary" >> security-report.md
          echo "" >> security-report.md
          echo "| Scan Type | Status |" >> security-report.md
          echo "|-----------|--------|" >> security-report.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> security-report.md
          echo "| Bandit Scan | ${{ needs.bandit-scan.result }} |" >> security-report.md
          echo "| Custom Security Checks | ${{ needs.custom-security-checks.result }} |" >> security-report.md
          echo "| Semgrep Scan | ${{ needs.semgrep-scan.result }} |" >> security-report.md
          echo "| Docker Image Scan | ${{ needs.docker-scan.result }} |" >> security-report.md
          echo "| Secret Scanning | ${{ needs.secret-scanning.result }} |" >> security-report.md
          echo "" >> security-report.md
          
          # Process custom security check results if available
          python -c "
import json
import os
import sys

try:
    custom_results_path = 'security-artifacts/custom-security-results/custom-security-results.json'
    if os.path.exists(custom_results_path):
        with open(custom_results_path, 'r') as f:
            data = json.load(f)
            
        with open('security-report.md', 'a') as report:
            report.write('## Custom Security Check Findings\n\n')
            
            summary = data.get('summary', {})
            report.write(f'- **Total Issues**: {summary.get(\"total\", 0)}\n')
            report.write(f'- **Critical**: {summary.get(\"critical\", 0)}\n')
            report.write(f'- **High**: {summary.get(\"high\", 0)}\n')
            report.write(f'- **Medium**: {summary.get(\"medium\", 0)}\n')
            report.write(f'- **Low**: {summary.get(\"low\", 0)}\n\n')
            
            # List high and critical issues
            high_issues = [i for i in data.get('issues', []) if i.get('severity') in ['HIGH', 'CRITICAL']]
            if high_issues:
                report.write('### High/Critical Issues\n\n')
                for issue in high_issues:
                    report.write(f'- **{issue.get(\"issue_type\")}** ({issue.get(\"severity\")}) in \`{issue.get(\"file_path\")}:{issue.get(\"line_number\")}\`\n')
                    report.write(f'  - {issue.get(\"description\")}\n')
                    if issue.get('recommendation'):
                        report.write(f'  - Recommendation: {issue.get(\"recommendation\")}\n')
                report.write('\n')
except Exception as e:
    print(f'Error processing custom security results: {e}')
"
          
          echo "## Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "1. Review all findings in the detailed reports" >> security-report.md
          echo "2. Address high and critical vulnerabilities before release" >> security-report.md
          echo "3. Update dependencies with known security issues" >> security-report.md
          echo "4. Fix any custom security check findings" >> security-report.md
          echo "" >> security-report.md
          
          echo "For detailed results, see the artifacts from each scan job." >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  notify-slack:
    name: Notify Security Issues
    needs: [security-report]
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "⚠️ Security scan detected issues in IntentVerse v1.1.0",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "⚠️ *Security scan detected issues in IntentVerse v1.1.0*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please review the security report in the workflow artifacts."
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Security Scan Results>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK